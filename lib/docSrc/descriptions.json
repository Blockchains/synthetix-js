{
  "Nomin": {
    "AccountFrozen": "",
    "AccountUnfrozen": "",
    "Burned": "",
    "CourtUpdated": "",
    "HavvenUpdated": "",
    "Issued": "",
    "onlyCourt": "",
    "onlyHavven": "",
    "burn": "",
    "emitAccountFrozen": "",
    "emitAccountUnfrozen": "",
    "emitBurned": "",
    "emitCourtUpdated": "",
    "emitHavvenUpdated": "",
    "emitIssued": "",
    "fallback": "",
    "freezeAndConfiscate": "",
    "issue": "",
    "setCourt": "",
    "setHavven": "",
    "transfer": "",
    "transferFrom": "",
    "transferFromSenderPaysFee": "",
    "transferSenderPaysFee": "",
    "unfreezeAccount": ""
  },
  "IssuanceController": {
    "FundsWalletUpdated": "",
    "HavvenUpdated": "",
    "NominUpdated": "",
    "OracleUpdated": "",
    "PriceStalePeriodUpdated": "",
    "PricesUpdated": "",
    "onlyOracle": "",
    "pricesNotStale": "",
    "exchangeEtherForNomins": "Exchange ETH to nUSD.",
    "exchangeNominsForHavvens": "Exchange nUSD for Havvens.",
    "fallback": "Fallback function (exchanges ETH to nUSD).",
    "havvensReceivedForNomins": "Calculate how many havvens you will receive if you transfer an amount of nomins.",
    "nominsReceivedForEther": "Calculate how many nomins you will receive if you transfer an amount of ether.",
    "pricesAreStale": "Check if the prices haven't been updated for longer than the stale period.",
    "setFundsWallet": "Set the funds wallet where ETH raised is held.",
    "setHavven": "Set the Havven contract that the issuance controller uses to issue Havvens.",
    "setNomin": "Set the Nomin contract that the issuance controller uses to issue Nomins.",
    "setOracle": "Set the Oracle that pushes the havven price to this contract.",
    "setPriceStalePeriod": "Set the stale period on the updated price variables.",
    "updatePrices": "Access point for the oracle to update the prices of havvens / eth.",
    "withdrawHavvens": "Withdraw havvens: Allows the owner to withdraw havvens from this contract if needed.",
    "withdrawNomins": "Withdraw nomins: Allows the owner to withdraw nomins from this contract if needed."
  },
  "Havven": {
    "EscrowUpdated": "",
    "FeePeriodDurationUpdated": "",
    "FeePeriodRollover": "",
    "FeesWithdrawn": "",
    "IssuanceRatioUpdated": "",
    "IssuersUpdated": "",
    "NominUpdated": "",
    "OracleUpdated": "",
    "PriceUpdated": "",
    "onlyOracle": "",
    "priceNotStale": "",
    "requireIssuer": "",
    "HAVtoUSD": "The value in USD for a given amount of HAV.",
    "USDtoHAV": "The value in HAV for a given amount of USD.",
    "burnNomins": "Burn nomins to clear issued nomins/free havvens.",
    "collateral": "The total havvens owned by this account, both escrowed and unescrowed, against which nomins can be issued. This includes those already being used as collateral (locked), and those available for further issuance (unlocked).",
    "computeIssuanceData": "Compute the new IssuanceData on the old balance.",
    "emitEscrowUpdated": "",
    "emitFeePeriodDurationUpdated": "",
    "emitFeePeriodRollover": "",
    "emitFeesWithdrawn": "",
    "emitIssuanceRatioUpdated": "",
    "emitIssuersUpdated": "",
    "emitNominUpdated": "",
    "emitOracleUpdated": "",
    "emitPriceUpdated": "",
    "fallback": "Constructor.",
    "issuanceCurrentBalanceSum": "",
    "issuanceDraft": "The collateral that would be locked by issuance, which can exceed the account's actual collateral.",
    "issuanceLastAverageBalance": "",
    "issuanceLastModified": "",
    "issueMaxNomins": "",
    "issueNomins": "Issuance is only allowed if the havven price isn't stale and the sender is an issuer., Issue nomins against the sender's havvens.",
    "lockedCollateral": "Collateral that has been locked due to issuance, and cannot be transferred to other addresses. This is capped at the account's total collateral.",
    "maxIssuableNomins": "The maximum nomins an issuer can issue against their total havven quantity. This ignores any already issued nomins.",
    "priceIsStale": "Check if the price of havvens hasn't been updated for longer than the stale period.",
    "recomputeLastAverageBalance": "Recompute and return the given account's last average balance.",
    "remainingIssuableNomins": "The remaining nomins an issuer can issue against their total havven quantity.",
    "rolloverFeePeriodIfElapsed": "Check if the fee period has rolled over. If it has, set the new fee period start time, and record the fees collected in the nomin contract.",
    "setEscrow": "Only the contract owner may call this., Set the associated havven escrow contract.",
    "setFeePeriodDuration": "Only callable by the contract owner. The duration must fall within acceptable bounds (1 day to 26 weeks). Upon resetting this the fee period may roll over if the target duration was shortened sufficiently., Set the targeted fee period duration.",
    "setIssuanceRatio": "Only callable by the contract owner., Set the issuanceRatio for issuance calculations.",
    "setIssuer": "Set whether the specified can issue nomins or not.",
    "setNomin": "Only the contract owner may call this., Set the associated Nomin contract to collect fees from.",
    "setOracle": "Set the Oracle that pushes the havven price to this contract.",
    "setPriceStalePeriod": "No max/minimum, as changing it wont influence anything but issuance by the foundation, Set the stale period on the updated havven price.",
    "totalIssuanceCurrentBalanceSum": "",
    "totalIssuanceLastAverageBalance": "",
    "totalIssuanceLastModified": "",
    "transfer": "ERC20 transfer function.",
    "transferFrom": "ERC20 transferFrom function.",
    "transferableHavvens": "If they have enough available Havvens, it could be that their havvens are escrowed, however the transfer would then fail. This means that escrowed havvens are locked first, and then the actual transferable ones., The number of havvens that are free to be transferred by an account.",
    "unlockedCollateral": "Collateral that is not locked and available for issuance.",
    "updateIssuanceData": "Since this updates the last transfer timestamp, if invoked consecutively, this function will do nothing after the first call. Also, this will adjust the total issuance at the same time., Update the havven balance averages since the last transfer or entitlement adjustment.",
    "updatePrice": "Access point for the oracle to update the price of havvens.",
    "withdrawFees": "Compute the last period's fee entitlement for the message sender and then deposit it into their nomin account."
  }
}